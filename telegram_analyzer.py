# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
print("====== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã ======")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import dotenv_values
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env...")
    config = dotenv_values(".env")
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key in config:
        if key in ['TELEGRAM_API_HASH', 'OPENAI_API_KEY', 'BOT_TOKEN']:
            print(f"{key}: {'[–£–°–¢–ê–ù–û–í–õ–ï–ù]' if config[key] else '[–û–¢–°–£–¢–°–¢–í–£–ï–¢]'}")
        else:
            print(f"{key}: {config[key]}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env: {e}")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
try:
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
    import telethon
    print("‚úì telethon –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    import telegram
    print("‚úì python-telegram-bot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    import openai
    print("‚úì openai –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    import schedule
    print("‚úì schedule –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
    exit(1)

from telethon import TelegramClient, functions, types
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from telegram import Update
from datetime import datetime, timedelta
import os
from openai import OpenAI
import time
import threading
import json
import getpass
import asyncio
import logging
import nest_asyncio
from telethon.tl.functions.channels import GetForumTopicsRequest

# –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loops
nest_asyncio.apply()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print("====== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã ======")
print("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env...")
config = dotenv_values(".env")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(config['TELEGRAM_API_ID'])
API_HASH = config['TELEGRAM_API_HASH']
OPENAI_API_KEY = config['OPENAI_API_KEY']
BOT_TOKEN = config['BOT_TOKEN']
TARGET_GROUP_LINK = config['TARGET_GROUP_LINK']

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
CHATS_CONFIG = {
    2278307897: {'topic_ids': [1, 2]},
    2295058026: {'topic_ids': [1, 272, 2, 8, 294, 4]}
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Telethon
telethon_client = None

async def init_telethon():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞"""
    global telethon_client
    telethon_client = TelegramClient('analyzer_session', API_ID, API_HASH)
    await telethon_client.start()
    return telethon_client

async def analyze_messages(messages, chat_title, topic_name, is_full_analysis=False, mode="retell", user_id=None):
    logger.info(f"Analyzing {'full history' if is_full_analysis else 'daily'} for {chat_title} - {topic_name}")
    
    summary_type = "–ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è" if is_full_analysis else "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
    header = f"üìä {chat_title}\nüí¨ {topic_name}\nüìÖ {summary_type}\n\n"
    
    if not messages:
        return None
        
    messages_text = []
    for message in messages:
        if message.message:
            messages_text.append(message.message)
        if message.media:
            messages_text.append("[–º–µ–¥–∏–∞-—Ñ–∞–π–ª]")
    
    if not messages_text:
        return None
        
    combined_text = "\n".join(messages_text)
    
    client = OpenAI(api_key=config['OPENAI_API_KEY'])
    
    prompt = f"""
    Make a brief summary of the following chat messages.
    Include all important information but make it concise.
    Don't skip any topics or decisions, just make them shorter.
    Don't evaluate or prioritize information - include everything in a brief form.
    
    Format the response in clear sections:
    1. Start with key points and decisions if any
    2. Group related topics together
    3. Use bullet points for listing items
    4. Add line breaks between different topics
    5. Use markdown formatting:
       - **bold** for important terms
       - ‚Ä¢ for bullet points
       - Add empty line between paragraphs
    
    The response should be in Russian.
    
    Messages:
    {combined_text}
    """
    
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant that formats summaries in clear, structured text with markdown"},
                {"role": "user", "content": prompt}
            ]
        )
        summary = response.choices[0].message.content
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        formatted_summary = f"{header}{'‚îÄ' * 30}\n\n{summary}\n\n{'‚îÄ' * 30}"
        return formatted_summary
        
    except Exception as e:
        logger.error(f"Error during OpenAI API call: {e}")
        return None

async def run_analysis(*, is_full_analysis=False, mode="retell", user_id=None, context=None, update=None):
    global telethon_client
    logger.info(f"Starting {'full' if is_full_analysis else 'daily'} analysis")
    
    try:
        for chat_id, config in CHATS_CONFIG.items():
            try:
                chat = await telethon_client.get_entity(chat_id)
                logger.info(f"Analyzing chat: {chat.title}")
                
                forum_topics = await telethon_client(functions.channels.GetForumTopicsRequest(
                    channel=chat,
                    offset_date=0,
                    offset_id=0,
                    offset_topic=0,
                    limit=100
                ))
                
                topics_dict = {topic.id: topic.title for topic in forum_topics.topics}
                
                for topic_id in config['topic_ids']:
                    try:
                        topic_name = topics_dict.get(topic_id, f"Topic {topic_id}")
                        logger.info(f"Analyzing topic: {topic_name}")
                        
                        messages = await telethon_client.get_messages(
                            chat,
                            limit=100 if not is_full_analysis else None,
                            reply_to=topic_id
                        )
                        
                        if messages:
                            summary = await analyze_messages(messages, chat.title, topic_name, is_full_analysis, mode, user_id)
                            if summary and context and update:
                                await context.bot.send_message(
                                    chat_id=update.effective_chat.id,
                                    text=summary
                                )
                                logger.info(f"Analysis sent to user chat: {topic_name}")
                                
                    except Exception as e:
                        error_msg = f"Error analyzing topic {topic_id}: {str(e)}"
                        logger.error(error_msg)
                        if context and update:
                            await context.bot.send_message(
                                chat_id=update.effective_chat.id,
                                text=error_msg
                            )
                        
            except Exception as e:
                error_msg = f"Error analyzing chat {chat_id}: {str(e)}"
                logger.error(error_msg)
                if context and update:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=error_msg
                    )
                
    except Exception as e:
        logger.error(f"Analysis error: {e}")
        raise

async def log_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message = update.message.text
    print(f"\n====== –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ======")
    print(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id} ({user.username})")
    print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
    print("============================\n")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Start command from user: {user_id} ({update.effective_user.username})")
    
    mode = "describe"
    if context.args and context.args[0] in ["retell", "describe"]:
        mode = context.args[0]
    
    await update.message.reply_text("Starting daily chat analysis...")
    try:
        await run_analysis(
            is_full_analysis=False,
            mode=mode,
            user_id=user_id,
            context=context,
            update=update
        )
        await update.message.reply_text("Analysis completed successfully!")
    except Exception as e:
        await update.message.reply_text(f"Analysis error: {str(e)}")

async def full_analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Full analyze command from user: {user_id} ({update.effective_user.username})")
    
    mode = "describe"
    if context.args and context.args[0] in ["retell", "describe"]:
        mode = context.args[0]
    
    await update.message.reply_text("Starting full history analysis...")
    try:
        await run_analysis(
            is_full_analysis=True,
            mode=mode,
            user_id=user_id,
            context=context,
            update=update
        )
        await update.message.reply_text("Full analysis completed successfully!")
    except Exception as e:
        await update.message.reply_text(f"Analysis error: {str(e)}")

def run_scheduler():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    schedule.every().day.at("09:00").do(run_analysis, False)
    while True:
        schedule.run_pending()
        time.sleep(60)

async def check_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        client = TelegramClient('analyzer_session', API_ID, API_HASH)
        await client.connect()
        is_authorized = await client.is_user_authorized()
        await client.disconnect()
        return is_authorized
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def main():
    logger.info("Initializing application")
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(init_telethon())
    
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("full_analyze", full_analyze))
    
    logger.info("\n" + "="*40)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    logger.info("/start - –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    logger.info("/start describe - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è")
    logger.info("/start retell - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–µ—Å–∫–∞–∑–∞")
    logger.info("/full_analyze - –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏")
    logger.info("/full_analyze describe - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è")
    logger.info("/full_analyze retell - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–µ—Å–∫–∞–∑–∞")
    logger.info("–¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –∫–∞–≤—ã—á–∫–∞—Ö –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")
    logger.info("–ü—Ä–∏–º–µ—Ä: –ß—Ç–æ –∏–º–µ–ª–æ—Å—å –≤ –≤–∏–¥—É –ø–æ–¥ \"–ø—Ä–æ–±–ª–µ–º–∞ —Å Docker\"?")
    logger.info("="*40 + "\n")
    
    application.run_polling()

if __name__ == '__main__':
    main() 